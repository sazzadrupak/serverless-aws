# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: myselfrupak
# "service" is the name of this project. This will also be added to your AWS resource names.
service: prsls-sls-sazzad

provider:
  name: aws
  runtime: nodejs20.x

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
          Resource:
            - !GetAtt RestaurantsTable.Arn
        - Effect: Allow
          Action: execute-api:Invoke
          Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants
        - Effect: Allow
          Action: ssm:GetParameters*
          Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/get-restaurants/config
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/config
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/secretString
        - Effect: Allow
          Action: kms:Decrypt
          Resource: ${ssm:/${self:service}/${param:ssmStage, sls:stage}/kmsArn}

  environment:
    rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}
    serviceName: ${self:service}
    stage: ${sls:stage}
    ssmStage: ${param:ssmStage, sls:stage}

functions:
  get-index:
    handler: functions/get-index.handler
    description: 'Get index page'
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      cognito_server_client_id: !Ref ServerCognitoUserPoolClient

  get-restaurants:
    handler: functions/get-restaurants.handler
    description: 'Get all restaurants'
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
  search-restaurants:
    handler: functions/search-restaurants.handler
    description: 'Search restaurants'
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            name: CognitoAuthorizer
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable
resources:
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}
        AliasAttributes: # Allow users to log in with their email addresses.
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes: # Verify that a user owns his/her email address (ie. by sending a verification code to the email)
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Name: given_name
            Required: true
            Mutable: true
            StringAttributeConstraints:
              MinLength: '1'
              MaxLength: '50'
          - AttributeDataType: String
            Name: family_name
            Required: true
            Mutable: true
            StringAttributeConstraints:
              MinLength: '1'
              MaxLength: '50'
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
            StringAttributeConstraints:
              MinLength: '1'
              MaxLength: '50'
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH # allows us to call the Cognito admin endpoints to register users and sign in as them
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${sls:stage}/serviceUrl
        Value:
          Fn::Join:
            - ''
            - - 'https://'
              - !Ref ApiGatewayRestApi
              - .execute-api.${aws:region}.amazonaws.com/${sls:stage}

  Outputs:
    RestaurantTableName:
      Value: !Ref RestaurantsTable
      Export:
        Name: RestaurantTableName
    RestaurantTableArn:
      Value: !GetAtt RestaurantsTable.Arn
      Export:
        Name: RestaurantTableArn
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn
    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient
plugins:
  - serverless-export-env
custom:
  export-env:
    overwrite: true

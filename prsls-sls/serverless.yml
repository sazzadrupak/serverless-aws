# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: myselfrupak
# "service" is the name of this project. This will also be added to your AWS resource names.
service: prsls-sls-sazzad

provider:
  name: aws
  runtime: nodejs20.x

  environment:
    rest_api_url: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}
    serviceName: ${self:service}
    stage: ${sls:stage}
    ssmStage: ${param:ssmStage, sls:stage}
stepFunctions:
  stateMachines:
    orderFlow:
      definition: ${file(state_machines/order-flow.yml)}
functions:
  get-index:
    handler: functions/get-index.handler
    description: 'Get index page'
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      orders_api: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/orders
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${sls:stage}/GET/restaurants

  get-restaurants:
    handler: functions/get-restaurants.handler
    description: 'Get all restaurants'
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/get-restaurants/config
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/config
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/secretString
  search-restaurants:
    handler: functions/search-restaurants.handler
    description: 'Search restaurants'
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            name: CognitoAuthorizer
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/config
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${param:ssmStage, sls:stage}/search-restaurants/secretString
      - Effect: Allow
        Action: kms:Decrypt
        Resource: ${ssm:/${self:service}/${param:ssmStage, sls:stage}/kmsArn}
  place-order:
    handler: functions/place-order.handler
    description: 'Place order'
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            name: CognitoAuthorizer
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action:
          - events:PutEvents
        Resource: !GetAtt EventBus.Arn
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
      idempotency_table: !Ref IdempotencyTable
    destinations:
      onFailure:
        type: sqs
        arn: !GetAtt OnFailureQueue.Arn
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: !GetAtt EventBus.Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref RestaurantNotificationTopic
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: !GetAtt IdempotencyTable.Arn
      - Effect: Allow
        Action: sqs:SendMessage
        Resource: !GetAtt OnFailureQueue.Arn
  seed-orders:
    handler: functions/seed-orders.handler
    description: 'Seed orders for testing'
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      orders_table: !Ref OrdersTable
      idempotency_table: !Ref IdempotencyTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: !GetAtt IdempotencyTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt OrdersTable.Arn
resources:
  Conditions:
    IsE2eTest:
      Fn::StartsWith:
        - ${sls:stage}
        - dev

  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}
        AliasAttributes: # Allow users to log in with their email addresses.
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes: # Verify that a user owns his/her email address (ie. by sending a verification code to the email)
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Name: given_name
            Required: true
            Mutable: true
            StringAttributeConstraints:
              MinLength: '1'
              MaxLength: '50'
          - AttributeDataType: String
            Name: family_name
            Required: true
            Mutable: true
            StringAttributeConstraints:
              MinLength: '1'
              MaxLength: '50'
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
            StringAttributeConstraints:
              MinLength: '1'
              MaxLength: '50'
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH # allows us to call the Cognito admin endpoints to register users and sign in as them
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${sls:stage}/serviceUrl
        Value:
          Fn::Join:
            - ''
            - - 'https://'
              - !Ref ApiGatewayRestApi
              - .execute-api.${aws:region}.amazonaws.com/${sls:stage}
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:service}_${sls:stage}_order_events
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}_${sls:stage}_restaurant_notifications
    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1
    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: '*'
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn
    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic
    E2eTestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2eTest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source:
            - big-mouth
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2eTestQueue.Arn
            Id: E2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: '$.source'
                detailType: '$.detail-type'
                detail: '$.detail'
              InputTemplate: !Sub >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "${EventBus}"
                }
    IdempotencyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
    OnFailureQueue:
      Type: AWS::SQS::Queue
    AlarmTopic:
      Type: AWS::SNS::Topic
    AlarmTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: 'sazzad.rupak.dev@gmail.com'
        TopicArn: !Ref AlarmTopic
    OnFailureQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '[${sls:stage}] [NotifyRestaurant function] Failed events detected in OnFailure destination'
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OnFailureQueue.QueueName
        AlarmActions:
          - !Ref AlarmTopic
    DestinationDeliveryFailuresAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '[${sls:stage}] [NotifyRestaurant function] Failed to deliver failed events to OnFailure destination'
        MetricName: DestinationDeliveryFailures
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: FunctionName
            Value: !Ref NotifyDashrestaurantLambdaFunction # Serverless Framework generates this name for the notify-restaurant function in the serverless.yml.
        AlarmActions:
          - !Ref AlarmTopic
    EventBusArchive:
      Type: AWS::Events::Archive
      Properties:
        ArchiveName: ${self:service}-${sls:stage}-order-events-archive
        SourceArn: !GetAtt EventBus.Arn
        Description: 'Archive for order events'
        RetentionDays: 0 # Set to 0 to keep the archive indefinitely
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    UserNotificationTopic:
      Type: AWS::SNS::Topic

  Outputs:
    RestaurantTableName:
      Value: !Ref RestaurantsTable
      Export:
        Name: RestaurantTableName
    RestaurantTableArn:
      Value: !GetAtt RestaurantsTable.Arn
      Export:
        Name: RestaurantTableArn
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn
    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient
    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient
    EventBusName:
      Value: !Ref EventBus
    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName
    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic
    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue

plugins:
  - serverless-export-env
  - serverless-export-outputs
  - serverless-plugin-extrinsic-functions
  - serverless-iam-roles-per-function
  - serverless-step-functions

custom:
  export-env:
    overwrite: true
  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.env.cfnoutputs
